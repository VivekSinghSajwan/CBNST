#include <stdio.h>

void bestFit(int block[], int b, int process[], int p) 
{
    int allocation[p];
    int occupied[b]; 
    for (int i = 0; i < p; i++) 
        allocation[i] = -1;  
    for (int i = 0; i < b; i++)  
        occupied[i] = 0;  

    for (int i = 0; i < p; i++) 
    {
        int indx = -1; 
        for (int j = 0; j < b; j++) 
        {
            if (block[j] >= process[i] && !occupied[j]) 
            {
                if (indx == -1 || block[j] < block[indx])
                    indx = j;
            }
        }
        if (indx != -1) 
        {
            allocation[i] = indx;
            occupied[indx] = 1;
        }
    }

    printf("Best Fit Allocation:\n");
    for (int i = 0; i < p; i++)
    {
        if (allocation[i] != -1)
            printf("%d - %d\n", process[i], allocation[i] + 1);
        else
            printf("%d - no free block available\n", process[i]);
    }
}

int main() {
    int b, p;
    printf("Enter number of free blocks available: ");
    scanf("%d", &b);
    int blocks[b];
    printf("Enter sizes of %d blocks: ", b);
    for (int i = 0; i < b; i++)
        scanf("%d", &blocks[i]);

    printf("Enter number of processes: ");
    scanf("%d", &p);
    int processes[p];
    printf("Enter memory requirements of %d processes: ", p);
    for (int i = 0; i < p; i++) {
        scanf("%d", &processes[i]);
    }
    bestFit(blocks, b, processes, p);
    return 0;
}
